library ieee;
use ieee.std_logic_1164.all;

entity edge_detect is

  port (async_sig : in std_logic;
        clk       : in std_logic;
        rise      : out std_logic;
        fall      : out std_logic;
		  EDGE_DETECT_SPEED : in std_logic);
end;

architecture RTL of edge_detect is
constant all_ones_slow : std_logic_vector (10 downto 0) := (others => '1');
constant all_zeros_slow : std_logic_vector (10 downto 0) := (others => '0');
constant all_ones_fast : std_logic_vector (6 downto 0) := (others => '1');			-- old value 3 downto 0
constant all_zeros_fast : std_logic_vector (6 downto 0) := (others => '0');		-- old value 3 downto 0
begin


process (clk)
VARIABLE input_s_slow : std_logic_vector(11 downto 0);
VARIABLE input_s_fast : std_logic_vector(7 downto 0);
VARIABLE old_val : std_logic := '0';
VARIABLE new_val : std_logic := '0';
begin
 if rising_edge( clk ) then 
	 input_s_slow := async_sig & input_s_slow(11 downto 1); 
	 input_s_fast := async_sig & input_s_fast(7 downto 1);
    rise <= '0';
	 fall <= '0';
	if((input_s_slow(10 downto 0) = all_ones_slow and EDGE_DETECT_SPEED = '0') or (input_s_fast(6 downto 0) = all_ones_fast and EDGE_DETECT_SPEED = '1')) then
		old_val := new_val;
		new_val := '1';
		if(old_val = '0' and new_val = '1') then
			rise <= '1';
			fall <= '0';
		end if;
	elsif((input_s_slow(10 downto 0) = all_zeros_slow and EDGE_DETECT_SPEED = '0') or (input_s_fast(6 downto 0) = all_zeros_fast and EDGE_DETECT_SPEED = '1')) then
		old_val := new_val;
		new_val := '0';
		if(old_val = '1' and new_val = '0') then
			rise <= '0';
			fall <= '1';
		end if;
	end if;
end if;	
end process ;
end architecture;

